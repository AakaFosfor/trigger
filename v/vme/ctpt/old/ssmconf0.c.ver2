/* SSM routines used in v/vme/ctp package (i.e. all the
ctp boards accessed through 1 vme space */
#ifndef SSMCONNECT
#include "ssmconnection.h"
#define SSMCONNECT
#endif



/*-------------------------------------------------------------FOconnect()
 *
 * Now generaly si=fun(sg,params) where params are settings of board
*/
int FOconnect(int n,int *boards){
 int i,offset,error=0;
 Signal *si,*sg;
 char *pat; 
 // loop over receiving boards
 for(i=1;i<n;i++){                      
  si=sms[boards[i]].signal->first;
  //loop over signals of receiving board
  while(si){
    // Find if si signal exist in generating board
    sg=findSignal(boards[0],si->signamenum,si->signame);
    if(sg){     	     
     pat=getPatfromF(sms[boards[0]].sm,sg->channel,sg->patlen);
     if(pat)offset=syncSIG2(boards[i],si->channel,pat);
     free(pat);
     if(offset<0){error++;continue;}
     error=error+compSIG(boards[0],sg->channel,boards[i],si->channel,offset);   
    }else {
      warnmess("FOconnect",boards[i],si->signame," nor in table");  
    }
    si=si->next;	  
  }  
 }	 
 return error;
}
//------------------------------------------------------------------
int FOL0L1(int n,int *boards){
 int clust[4][7];   // These are params !
 int roc[4][4],calflag;
 int i,j,k;
 int offset,inclust,intest,patlen,connector;
 Signal *si,*sg,*sd; 
 char *pat;
 w32 *sm,*smd,mask;
 getCluster(boards[0],&calflag,clust,roc);
 for(i=1;i<n;i++){                       // loop over receiving boards
  connector=boards[i]-11;                // connector = detector	 
  si=sms[boards[i]].signal->first;
  while(si){                            //loop over signals of rec board [i]	
    switch(si->signamenum){             
      case 37 ://FPPP---------------------------------------------- 
	// calflag + test cluster	
	if(calflag && clust[connector][0]){ 
        //PP signal
	sg=findSignal(boards[0],31,"PP");
        if(sg && sg->patlen){
      	  pat=getPatfromF(sms[boards[0]].sm,sg->channel,sg->patlen);	  
	  if(pat)offset=syncSIG2(boards[i],si->channel,pat);
	  free(pat);
          if(offset<0)break;
	  si->offset=offset;  // toto neskor mozno skovat
          compSIG(boards[0],sg->channel,boards[i],si->channel,offset);
	}else{
	  warnmess("FOL0L1",boards[0],"FPPP"," not in table or patlen=0");
	}
	}else{
	  warnmess("FOL0L1",boards[i],"FPPP"," No calflag or test cluster");	
	}	
      break;
      case 38 ://FPL0----------------------------------------------
        sm = (w32 *) malloc(Mega*sizeof(w32));
	if(!sm)goto ERR2;
        for(j=0;j<Mega;j++)sm[j]=0;
        patlen=0;  
	sg=sms[boards[0]].signal->first; 
	while(sg){         //loop over gen signals
	if(sg->patlen){    //pattern was generated
	  // Find OR of clusters in this connector
	  // "CluL01" = 24 
          j=0;
	  while(j<7 && (sg->signamenum != (24+j)))j++; //Is the name in table?
	  //Is cluster in detector ?
	  inclust=0;
	  if( j != 7 ) inclust=clust[connector][j];
	  //printf("%i %s %s %i\n",boards[i],sg->signame,si->signame,inclust);
	  // OR of clusters
	  if(inclust){
	    patlen=sg->patlen;
	    mask=1<<(sg->channel);
	    for(j=0;j<Mega;j++){
	      sm[j]=sm[j]+((sms[boards[0]].sm[j] & mask)==mask);
	    }
	  }
	}
        sg=sg->next;
	}
	if(patlen){ // at least one cluster was generated	
          // 1/0 signal
	  for(j=0;j<Mega;j++)if(sm[j])sm[j]=1;
	  pat=getPatfromF(sm,0,patlen);
	  if(pat)offset=syncSIG2(boards[i],si->channel,pat);
	  free(pat);
	  if(offset<0){
		  free(sm);
		  break;
	  }
	  si->offset=offset;
          compSIG2(sm,0,boards[i],si->channel,offset);
	}else{
	  warnmess("FOL0L1",boards[i],si->signame," patlen=0 or no cluster");  	
	}
        free(sm);	
      break;
      case 39 ://FPL1--------------page 3 of fo_l1.tdf-----------------------
        sm = (w32 *) malloc(Mega*sizeof(w32));
	if(!sm)goto ERR2; 
        
        for(j=0;j<Mega;j++)sm[j]=0;
        patlen=0;
	intest=0;        //test cluster 
	sg=sms[boards[0]].signal->first; 
	while(sg){       //loop over generated signals
	  if(sg->patlen){
	   // Find if gen signal is CluL1
	   // "CluL11" = 17 
           j=0;
	   while(j<7 && (sg->signamenum != (17+j)))j++;
	   inclust=0;
	   if( j != 7 ) inclust=clust[connector][j];
	   if(j == 0 )intest=1;	   
	   // OR of clusters
	   if(inclust){
	     patlen=sg->patlen;
	     mask=1<<(sg->channel);
	     for(j=0;j<Mega;j++){
	       sm[j]=sm[j]+((sms[boards[0]].sm[j] & mask)==mask);
	     }
	   }
	  }
        sg=sg->next;
	}
	if(patlen){ //at least one cluster generated 
          // 1/0 signalu	
	  for(j=0;j<Mega;j++)if(sm[j])sm[j]=1;
	  pat=getPatfromF(sm,0,patlen);
	  if(pat)offset=syncSIG2(boards[i],si->channel,pat);
	  free(pat);
	  if(offset<0){
		  free(sm);
		  break;
	  }
	  si->offset=offset;
          compSIG2(sm,0,boards[i],si->channel,offset);	
          // FPL1D ---------------------------------------------------------
	  sg=findSignal(boards[0],7,"L1D");
	  if(!sg){
	    warnmess("FOL0L1",boards[0],"L1D"," not in table");
	    continue;  
	  }
	  sd=findSignal(boards[i],40,"FPL1D");
	  if(!sd){
	    warnmess("FOL0L1",boards[i],"FPL1D", " not in table");
	    continue; 	  
	  }	  
 	  smd = (w32 *)  malloc(Mega*sizeof(w32));
	  if(!smd)goto ERR2; 

	  // Create transformed L1 data in sm[]
	  //printf("intest= %i \n",intest);
	  j=0;k=0;
	  while(k<Mega){
	    if(sm[k]){	  
	     int k0,j0;
	     j=k;
	     //sms[boards[0]].sm[j] & mask
	     if(k<Mega)smd[k++]=0;                 //Spare 
             if(k<Mega)smd[k++]=calflag*intest;	 // Calibration flag   
	     k0=k;
	     //Roc copy (if testcluster roc is copied)
             while(((k-k0)<4) && k<Mega)smd[k]=roc[connector][3-(k++-k0)]*intest;
	    //ESR, L1SwC 
	    if(k<Mega)smd[k++]=bit(sms[boards[0]].sm[j++],sg->channel);
	    if(k<Mega)smd[k++]=bit(sms[boards[0]].sm[j++],sg->channel);
	    //L1 classes
	    j0=j;
	    while(((j-j0)<50) && k<Mega)smd[k++]=bit(sms[boards[0]].sm[j++],sg->channel);	  
	   }else smd[k++]=0;
	  }
	  //for(j=0;j<Mega;j++)if(sm[j])sm[j]=1;
	  // sync and compare
	  offset=syncSIG1(sms[boards[i]].sm,sd->channel);
	  if(offset<0){
		  free(sm);free(smd);
		  break;
	  }
	  j=syncSIG1(smd,0);
          compSIG3(smd,0,boards[i],sd->channel,offset-j);	
	}else{
	  warnmess("FOL0L1",boards[i],si->signame," patlen=0 or no cluster"); 
	  warnmess("FOL0L1",boards[i],"FPL1D"," patlen=0"); 
	}
	printf("%i %x \n",i,smd);
	free(smd);
	smd=NULL;
	free(sm);
      break;	        
      /*case 40: //FPL1D
        FPL1D can follow only if FPL1 is generated,(if so ?)
        so this goes after FPL1	        
        break;*/	
      default:
        printf("FOL0L1 error: %s not found.\n",si->signame); 
      break; 
    }
    si=si->next;
  }	
 } 	 
 return 0;
ERR2: 
 printf("FOL0L1: not enough memory. \n");
 return 2; 
}
/*-------------------------------------------------------------------------
 
*/ 
int FOL2(int n, int *boards){
 int clust[4][7]; // clust is not used ?? check ! 
 int roc[4][4],calflag;
 int i,j,offset,connector;
 Signal *si,*sgS,*sgD1,*sgD2;
 w32 *sm,*smd;

 getCluster(boards[0],&calflag,clust,roc);

 // Find L2Strobe in generating board      
 sgS=sms[boards[0]].signal->first;
 while(sgS && (sgS->signamenum != 3))sgS=sgS->next;
 if(!sgS || !sgS->patlen){
    warnmess("FOL2",boards[0],"StrL2D"," "); goto ERR;
 } 
 // Find L2D1 in generating board         
 sgD1=sms[boards[0]].signal->first;
 while(sgD1 && (sgD1->signamenum != 4))sgD1=sgD1->next;
 if(!sgD1 || !sgD1->patlen){
   warnmess("FOL2",boards[0],"L2D1"," "); goto ERR;
 } 
 // Find L2D2 in generating board         
 sgD2=sms[boards[0]].signal->first;
 while(sgD2 && (sgD2->signamenum != 5))sgD2=sgD2->next;
 if(!sgD2 || !sgD2->patlen){
   warnmess("FOL2",boards[0],"L2D2"," "); //goto ERR;
 }
 
 sm = (w32 *) malloc(Mega*sizeof(w32));
 if(!sm) goto ERR2;
 smd = (w32 *) malloc(Mega*sizeof(w32));
 if(!smd) goto ERR2;
 
 for(i=1;i<n;i++){
   connector=boards[i]-11;            // connector = detector	
  //FPStrL2D-------------------------------------------------- 	 
  si=sms[boards[i]].signal->first;
  while(si && (si->signamenum != 41))si=si->next;   
  if(!si){
   warnmess("FOL2",boards[i],"FPStrL2D"," "); 	  
   continue;
  }
  for(j=0;j<Mega;j++){
    int j0;	  
    int l1clusters=0;	  
    if(bit(sms[boards[0]].sm[j],sgS->channel)){	
      l1clusters=l1clusters +     // Test cluster
	      bit(sms[boards[0]].sm[j0],sgD1->channel)*clust[connector][0];
      for(j0=j-6;j0<j;j0++)l1clusters=l1clusters +  // Clusters
	     bit(sms[boards[0]].sm[j0],sgD1->channel)*clust[connector][j-j0];   
    }
    //if(l1clusters)printf("%i\n",j);
    if(l1clusters)sm[j]=1; else sm[j]=0;
    //ak je strobe pojdu aj data    
  } 
  offset=syncSIG1(sms[boards[i]].sm,si->channel);
  if(offset<0){
   printf("FOL2: board %i FPStrL2D not found. \n",boards[i]);	  
   continue;
  }
  j=syncSIG1(sm,0);
  compSIG3(sm,0,boards[i],si->channel,offset-j);
  // L2Data------------------------------------------------
  // j - pointer to output serial bit
  // k - pointer to Data1/Data2 bit 
  for(j=0;j<Mega;j++){	  
   if(sm[j]){ 
    int k,k0,j0;	   
    int l2arf=0;
    int l2clstt;
    l2clstt=bit(sms[boards[0]].sm[j],sgD1->channel);
    // OR of L2 clusters
    j0=j;    
    while(j0<j+7 && j0<Mega)l2arf=l2arf+bit(sms[boards[0]].sm[j0++],sgD1->channel);
    //printf("l2arf=%i\n",l2arf);
    if(j<Mega && l2arf)smd[j++]=1; 
    // BCID and Orbit
    j0=j;
    k=j+6; //
    while(j<Mega && (j-j0)<36)smd[j++]=bit(sms[boards[0]].sm[k++],sgD1->channel);
    //Spare
    if(j<Mega)smd[j++]=0;
    if(j<Mega)smd[j++]=0;
    // Clt
    if(j<Mega)smd[j++]=calflag*l2clstt;
    if(j<Mega)smd[j++]=l2clstt;   // L2SwC
    //L2 clusters
    j0=j;
    k0=k-36-6;
    while(j<Mega && (j-j0)<6)smd[j++]=bit(sms[boards[0]].sm[k0++],sgD1->channel); 
    // 11 BC data gap
    k=k+11;
    // L2 classes
    j0=j; 
    while(j<Mega && (j-j0)<50){
      smd[j++]=bit(sms[boards[0]].sm[k++],sgD2->channel);
    }    
   }else sm[j]=0;
  }
  //L2Data comparison
  si=sms[boards[i]].signal->first;
  while(si && (si->signamenum != 42 ))si=si->next;  //FPL2Data   
  if(!si){
   warnmess("FOL2",boards[i],"FPL2D"," "); 	  
   continue;
  }
  offset=syncSIG1(sms[boards[i]].sm,si->channel); // tu je divna 1 na zaciatku

  if(offset<0){
   printf("FOL2: board %i L2data not found.\n",boards[i]);	  
   continue;
  }
  j=syncSIG1(smd,0);
  compSIG3(smd,0,boards[i],si->channel,offset-j);
  /* Debugging (using 14 for browser
  sms[14].sm = (w32 *) malloc(Mega*sizeof(w32));
  sms[13].sm = (w32 *) malloc(Mega*sizeof(w32));
  for(j=0;j<Mega;j++){
	  sms[14].sm[j]=smd[j];
	  sms[13].sm[j]=sm[j];
  } 
  */
 }
 free(sm);
 return 0;
ERR:
 return 1;
ERR2:
 printf("FOL2: not enough memory \n");
 return 2; 
}
int bit(w32 num,int channel){
 return ((num &(1<<channel))==(1<<channel));
}
void warnmess(char *mode,int board,char *signame,char *message){
 printf("%s warning: board %i signal %s not checked: %s\n",mode,board,signame,message);
}
/*----------------------------------------------------getCluster()
 * get FO settings and output them as table.
*/ 
void getCluster(int board,int *calflag,int clust[][7],int roc[][4]){
 //roc[detecor][bit]	
 w32 word,mask;
 int i,j,k=0;
 word= vmer32(FO_CLUSTER+BSP*ctpboards[board].dial);
 printf("CLUSTER: %x \n",word);
 for(i=0;i<4;i++){
   for(j=1;j<7;j++){
    mask=1<<(j+k-1);
    clust[i][j]= (word & mask) == mask;    
   }	  
   k=k+8; 
 }
 word=vmer32(FO_TESTCLUSTER+BSP*ctpboards[board].dial);
 printf("TEST_CLUSTER: %x \n",word);
 *calflag = (word & (1<<20)) == (1<<20);
 printf("Calflag=%i \n",*calflag);
 for(i=0;i<4;i++){
  mask=1<<(16+i);
  clust[i][0] = (word & mask) == mask; 
  for(j=0;j<4;j++){
   mask=1<<(4*i+j);	  
   roc[i][j] = (word & mask) == mask;	  
  } 
 }
 for(i=0;i<4;i++){
   printf("Detector %i CLUSTERS:",i);	 
   for(j=0;j<7;j++)printf(" %i ",clust[i][j]);
   printf("\n");
   printf("Detector %i      Roc:",i);
   for(j=0;j<4;j++)printf(" %i",roc[i][j]);
   printf("\n");
 }
 return;
}
/*--------------------------------------------------------WriteBoards()
 * write to ssms test patterns
 * write sms to hardware 
 */
int WriteBoards(int n,int *boards, w32 modecode){
 int i;
 writeSPn(boards[0],0,1,0);         // Write all 0 to generating board board[0]
 switch(modecode){
	 case 0x104:   // FO connections
            writeSPP(boards[0],0,1,"100000");
 	    writeSPP(boards[0],0,2,"100000");
            writeSPP(boards[0],0,3,"100000");
            writeSPP(boards[0],0,4,"100000");
            writeSPP(boards[0],0,5,"100000");
            writeSPP(boards[0],0,6,"100000");
	 break;
	 case 0x20c:    // FO L0L1
	    // CluL01  -  L0 test cluster
            writeSPP(boards[0],0,1,"100000");
            // CluL02
            writeSPP(boards[0],0,2,"100000");
            // CluL03
            writeSPP(boards[0],0,3,"100000");
            // CluL04
            writeSPP(boards[0],0,4,"100000");
            // CluL05
            writeSPP(boards[0],0,5,"100000");
            // CluL06
            writeSPP(boards[0],0,6,"100000");
            //CluL07
            writeSPP(boards[0],0,7,"100000");
            // PP
            writeSPP(boards[0],0,8,"100000");
            // CluL11  - L1 test cluster
            //writeSPP(boards[0],0,9,"10000000000000000000");
            // CluL12  
            writeSPP(boards[0],0,10,"10000000000000000000");
            // CluL13  
            writeSPP(boards[0],0,11,"10000000000000000000");
            // CluL14  
            writeSPP(boards[0],0,12,"10000000000000000000");
            // CluL15  
            writeSPP(boards[0],0,13,"10000000000000000000");
            // CluL16  
            writeSPP(boards[0],0,14,"10000000000000000000");
            // CluL17  
            writeSPP(boards[0],0,15,"10000000000000000000");
 
            // StrL1D recently redundant, so not tested
            //writeSPP(boards[0],0,16,"faa00");
            // L1D
            writeSPP(boards[0],0,17,"11111111111111000000");
	 break;
	 case 0x21c:    //L2 gen mode
	   // There is a minimum distance between signal which is ?? bc
           // StrL2D L2 mode
           writeSPP(boards[0],0,1,"0800000000000000000000000000");
           // L2D1
	   // T654 321T 6543 21BC 
	   // 0111 1110 0101 0101 0101
	   //   e   7    a    a     a
           writeSPP(boards[0],0,2,"e7aa0aaaaaaa3000000000000000");
           // L2D2
           writeSPP(boards[0],0,3,"000000000000000bbbbbbbbbbbb3");
         break;
         default:
	    printf("WriteBoards error: mode %i not found.\n",modecode);
	 return 1;	 
 } 
 writeSSM(boards[0]);                 // Write sms[board[0]].sm to hardware
 
 for(i=1;i<n;i++)writeSPn(boards[i],0,1,0);   //Write all 0 to receiving boards
 for(i=1;i<n;i++)writeSSM(boards[i]);          // Write ssm[board[i]].sm to hardware
 return 0;
}

