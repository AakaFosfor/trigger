#include "addresses.h"
#include "vmewrap.h"
#include <stdio.h>


#define Mega 1024*1024
#define kilo 1024
#define FMsize Mega
#define wDelay 4000
#define rDelay 1
#define wAttempts 4000

#define BUSYFM 0       /* FMem Ready/Busy status */
#define READYFM 1
#define BUSYFP 1       /* FPGA Ready/Busy status */
#define READYFP 0
#define MAXCYC 0x80
#define CUT 0

extern int quit;
static w32 FlMem[FMsize];
static w32 ConfigFile[FMsize];
static int AddErr[FMsize];
static int DatErr[FMsize];
int errcount;
w32 Pattern;
/*********************************************************************************/
/*------------------------FPGA----------------------------------------------------*/
/**********************************************************************************/
/*FGROUP FPGA GetStatusFPGA
Get Status of FPGA. 

*/
int GetStatusFPGA()
{
 printf("FPGA status is %i \n",GetStatFPGA());
}
int GetStatFPGA()
{
 int stat;
 w32 status,bit0=1;
 status=vmer32(ConfigStatus);
 stat= ( (status&bit0) == bit0 );
 return stat;
}
/*--------------------------------------------------------------------*/
/*FGROUP FPGA LoadFPGA
Loads FPGA from Flash memory

*/
void LoadFPGA()
{
 switch(loadFPGA()){
  case BUSYFP : printf("FPGA loading unsuccesful. Timeout in 400 milisecs. \n");break;
  case READYFP: printf("FPGA loading succesful!. \n");break;
  case       2: printf("Cannot load FPGA. Flash Memory busy, check status.\n");break;
  case       3: printf("Cannot load FPGA. FPGA busy. \n");break;
  case       4: printf("Cannot load FPGA, probably not correct file. \n");break;
  default     : printf("Unexpected return from loadFPGA. Check code. \n");
 }
}
int loadFPGA(){
 int i=0,j,stat;
 short *bit;
 if(resetFM() == 0){
   if(GetStatFPGA() == READYFP ){
     printf("FPGA configuration started. \n");
     /* while( (i<10) && ((stat=GetStatFPGA())== BUSYFP) ) */
     printf("TIME   RY/BY   nSTATUS  CONF_DONE INIT_DONE  nCONFIG    DCLK \n"); 
     vmew32(ConfigStart,0x0);
     MonitorStatus(ConfigStatus,&bit);
     for(j=0; j<6; j++)printf("%5i     ",bit[j]);printf("\n");
     while(i<800)
     {
      MonitorStatus(ConfigStatus,&bit);
      for(j=0; j<6; j++)printf("%5i     ",bit[j]);printf("\n");
      i++;
     }
     MonitorStatus(ConfigStatus,&bit);
     if( (bit[2] == 0) || (bit[3]== 0)) return 4;
     stat=GetStatFPGA(); 
     printf("loadFPGA:FPGA status = %i \n",stat);
     return stat;
   }else return 3;
 }else return 2;
}
/*FGROUP FPGA MonitorStatusFPGA
Monitors FPGA by reading status word.
Ntimes: number of times you want to read status word.
Tinterval: time interval between reading status word in microseconds. 

*/
int MonitorStatusFPGA(int Ntimes, int Tinterval)
{
 int i,j;
 short *bit;
 for(j=0;j<Ntimes;j++){
   if((j/20)*20 -j == 0)
/*       12345678901234567890123456789012345678901234567890 */
   printf("TIME   RY/BY   nSTATUS  CONF_DONE INIT_DONE  nCONFIG    DCLK \n");   
   MonitorStatus(ConfigStatus,&bit);
   printf("%4i",j);
   for(i=0; i<6; i++)printf("%5i     ",bit[i]);
   printf("\n");
   free(bit);
   /* usleep(Tinterval); */
 }
/*  printf("MonitorStatusFPGA finished.\n"); */
}
/*****************************************************************************/
/*-------------Flash Memory--------------------------------------------------*/
/******************************************************************************/
/*FGROUP FlMem GetStatus
Get Status of Flash memory.
*/
int GetStatusFM()
{
 printf("Flash memory status is %i \n",GetStatFM()); 
}
int GetStatFM()
{
 int stat;
 w32 status,bit7=128;
 status=vmer32(FlashStatus);
 stat = ( (status&bit7) == bit7 );
 return stat;
}
/*****************************************************************************/
/*FGROUP FlMem ResetFM
Resets Flash Memory.
*/
void ResetFM(){
 switch(resetFM()){
  case  0:printf("ResetFM: succes. \n");break;
  case  1:printf("ResetFM: timeout.\n");break;
  case  2:printf("ResetFM: FM busy.\n");break;
  default:printf("ResetFM: Unexpected return code. Check code. \n");
 }
}
int resetFM()
{
 if( 1 /* GetStatFM() == READYFM*/ ){
    if(writeFM(FlashAccessNoIncr,0xF0) !=0 )return 1; else return 0;
 }else return 2;
}
/******************************************************************************/
/*FGROUP FlMem LoadFM
Loads Flash Memory from the file on disk.
*/
void LoadFM()
{
 switch(loadFM()){
  case 0: printf("FM loading succesful ! \n");break;
  case 2: printf("The Input File for Flash memory can not be read.\n");break;
  case 1: printf("Problem reading Input File \n");break;
  case 3: printf("Flash memory busy. Write not allowed. \n");break;
  case 4: printf("LoadFM: problem to clear address \n");break;
  case 5: printf("LoadFM: problem in 1st word \n");break;
  case 6: printf("LoadFM: problem in 2nd word \n");break;
  case 7: printf("LoadFM: problem in 3rd word \n");break;
  case 8: printf("LoadFM: problem in 4th word \n");break;
  case 9: printf("LoadFM: interrupted by user. \n");break;
  default:printf("LoadFM: unexpected return code. Check code. \n");
 }
}
int loadFM()
{
 int i,idum,size;
 
 if(ReadInputFileS(&size) != 0) return 2;
 if(ReadInputFileF(size) != 0)return 1;
 
 if( GetStatFM() == READYFM ){
   if(writeFM(FlashAddClear,0x0) !=0) return 4;
   for (i=0; i<size; i++){
   if(writeFM(FlashAccessNoIncr,0xAA) !=0) return 5;
   if(writeFM(FlashAccessNoIncr,0x55) !=0) return 6;
   if(writeFM(FlashAccessNoIncr,0xA0) !=0) return 7;
   if(writeFM(FlashAccessIncr,ConfigFile[i]) !=0) return 8; 
   /* printf("LoadFM: ConfigFile[%i]=%c \n",i,ConfigFile[i]); */
   /* if( (i % 10) == 0){ printf(" %i \r",i);fflush(stdout);} */
   if( (i % 10000) == 0) printf("LOadFM: %i words written \n",i);
   for(idum=0;idum<10;idum++)
   if(quit !=0) return 9;
   }
 return 0;
 }else return 3;  
}
/*FGROUP FlMem ReadInputFile
Reads the input configuration file from disk
and saves it to array.
*/
int ReadInputFile()
{
 int size;
 if(ReadInputFileS(&size) == 0){
 printf("Size of the Input File is %i\n",size);
 return 0;
 }else return 1; 
}
/******************************************************************************/
/*FGROUP FlMem CheckContent
Reads Content of Flash Memory and compares it
with the file on disk.
*/
void CheckContent()
{
 switch(checkcontent()){
  case 0:printf("CheckContent: finished succesfully.\n");break;
  case 2:printf("CheckContent: The Input File for Flash memory ");
         printf("cannot be read.\n");break;
  case 3:printf("CheckContent: Cannot read Flash Memory \n");break;
  case 1:printf("CheckContent: Problem reading Input File \n");break;
  default:printf("CheckContent: unexpected return code. Check the code \n");
 }
}
int checkcontent()
{
 int size,diftot=0,diff[8]={0,0,0,0,0,0,0,0};
 int i,j,rc=-1;
 w32 difbit,pit; 
 FILE *FMdif;
 
 if(ReadInputFileS(&size) != 0) return 2;
 if(ReadInputFileF(size) != 0) return 1;
 if(ReadFlashMem() != 0) return 3;
 FMdif=fopen("FMdif.txt","w");
 for(i=0;i<size;i++){
  difbit=(FlMem[i]^ConfigFile[i]);
  if(FlMem[i] != ConfigFile[i]){
     if(rc == -1)rc=i;
     diftot++;
     /*printf("i=%i FM= %i CF= %i \n",i,FlMem[i],ConfigFile[i]);*/
  } 
  if(rc != -1)fprintf(FMdif,"%5x File: %2x %2x \n",i,ConfigFile[i],FlMem[i]);
  pit=1;
  for(j=0;j<8;j++){
      /*  printf("%i ", difbit&pit );                    */
      diff[j]=diff[j]+( (difbit&pit) == pit );
      pit=2*pit;
  }
  /*  printf("\n");   */
 }
 printf("CheckContent: Total number of different words= %i. \n",diftot);
 printf("First different word at address %i \n",rc);
 printf("Differences bit by bit: \n");
 printf(" Bit0 Bit1 Bit2 Bit3 Bit4 Bit5 Bit6 Bit7 \n");
 for(i=0;i<8;i++)printf(" %.2f",diff[i]/((float) size));
 printf("\n");
 fclose(FMdif);
 return 0;
}
/********************************************************************************/
/*FGROUP FlMem EraseFM
Erases Flash Memory.
*/
void EraseFM()
{
 switch(eraseFM()){
  case 1: printf("EraseFM: FM erase  done succesfully. \n");break;
  case 0: printf("EraseFM: timeout at the end. \n");break;
  case 2: printf("EraseFM: timeout at word 1. \n");break;
  case 3: printf("EraseFM: timeout at word 2. \n");break;
  case 4: printf("EraseFM: timeout at word 3. \n");break;
  case 5: printf("EraseFM: timeout at word 4. \n");break;
  case 6: printf("EraseFM: timeout at word 5. \n");break;
  case 7: printf("EraseFM: Erase not started, FM busy \n");break;
  default: printf("EraseFM: unexpected return code. Check code. \n");
 }
}
int eraseFM()
{
 int i=0,stat; 
 if( GetStatFM() == READYFM ){
   if(writeFM(FlashAccessNoIncr,0xAA) !=0) return 2;
   if(writeFM(FlashAccessNoIncr,0x55) !=0) return 3;
   if(writeFM(FlashAccessNoIncr,0x80) !=0) return 4;
   if(writeFM(FlashAccessNoIncr,0xAA) !=0) return 5;
   if(writeFM(FlashAccessNoIncr,0x55) !=0) return 6;
   vmew32(FlashAccessNoIncr,0x10);
    while ( (i<50) && ( (stat=GetStatFM()) == BUSYFM ) ){
    usleep(999999);
    printf("%i secs: Erasing FM in progress, status=%i \n",i+1,stat);
    i++;
   }
   printf("%i secs: Erasing FM in progress, status=%i \n",i+1,stat);
   return stat;
 }
 else return 7;
}
/****************************************************************************/
/* Read Input File, find its size */
int ReadInputFileS(int *size)
{
 FILE *InputFile;
 int i=0,end; w8 word;
 size_t nmemb=1,nread;
 InputFile=fopen("FlashMem.cfg","rb");/* File is in directory vme */
 if(InputFile == NULL){
  printf("ReadInputFileS:Input File can not be opened. \n");
  *size=0;
  return 1;
 }else{
  printf("ReadInputFileS:Input File succesfully opened. \n");
  i=0;
  while((nread=fread(&word,1,nmemb,InputFile)) == nmemb){
   /*printf("ReadInputFileS:i=%i j=%i word=%2x \n",i,nread,word); */
   i++;
   if(i > FMsize){
     printf("ReadInputFileS:Input File seems too large! \n");
     return 2;
   }  
  }
  end=feof(InputFile);
  if(end != 1){
     printf("ReadInputFileS:Not a real end of file. Check the input file. \n ");
     return 3;
  }
  *size=i;
  /*  printf("*size=%i, size=%u \n",*size,size); */
  }
  close(InputFile);
  return 0;
}  
/*****************************************************************************/
/* Read Input File. */
int ReadInputFileF(int size)
{
 int i;
 FILE *InputFile;
 w8 word;
 size_t nmemb=1,nread;
  
 InputFile=fopen("FlashMem.cfg","rb");/* File is in directory vme */
 if(InputFile == NULL){
  printf("ReadInputFileF:Input File can not be opened. \n");
  return 1;
 } 
 
 /* printf("Address of file is %u \n",ConfFile); */
 for(i=0;i < size;i++){
   nread=fread(&word,1,nmemb,InputFile);
   if(nread != nmemb){
      printf("ReadInputFileF:Error in Reading Config File from LoadFM \n");
      return 3;
   }
   ConfigFile[i]=0;
   ConfigFile[i]=word;
   /*printf("ReadInputFileF:ConfigFile[%i]=%i \n",i,ConfigFile[i]);*/ 
 }
 close(InputFile);
 return 0;
}
/*FGROUP FlMem 
Check against 1
*/
int Check1()
{
 int i,dif=0;
 if(ReadFlashMem() != 0) return 3;
 for(i=0;i<Mega;i++){
  if(FlMem[i] != 0xff){
     dif++;
     printf("i=%i FM= %x \n",i,FlMem[i]);
     return i;
  }
 } 
 printf("THe number of different words is %i \n",dif);
 return 0;
}
/****************************************************************************/
/**************************TOOLS********************************************/
/***************************************************************************/
int MonitorStatus(w32 adresa, short **bity)
/*   Decompose the first 8bits of the word at address 'adresa' to bits 
     and returns array of 8 bits.
*/
{
 int i;
 w32 pit;
 w32 statword;
 short *bit =(short *) malloc(8*sizeof(short));
 
 statword=vmer32(adresa);

/* printf("statword=%x \n",statword); */
 
 pit=1;
 for(i=0; i<8; i++){
     bit[i] = ((statword & pit) == pit);  /* printf("%1i",bit[i]); */  
     pit=pit*2;
 }   /* printf("\n"); */
 *bity=bit;
 return 0;
}
/*****************************************************************************/
/*FGROUP FlMem  */
int ReadFlashMem()
{
 const size=FMsize;
 int i;
 if( resetFM() != 0){
  printf("ReadFlashMem: Cannot resetFM. \n");
  return 2;
 }
 if(GetStatFM() == READYFM){
    if(writeFM(FlashAddClear,0x0) !=0) return 2;
    for(i=0; i<size; i++){
     FlMem[i]=vmer32(FlashAccessIncr)&0xff;
     /*printf("ReadFM from board: FlMem[%i]=%x \n",i,FlMem[i]);*/
    }  
    return 0;     
 }else{
  printf("ReadFlashMem: Cannot read FM, FM busy. \n ");
  return 1;
 }
}
/***************************************************************************/
int writeFMdeb(w32 address, w32 data,int *addFM)
/* write to FM and checks for timeout */
{
 int attempts=0;
 vmew32(address,data); 
 while ( (GetStatFM() == BUSYFM) && (attempts < wAttempts) )attempts=attempts+1;
 if(attempts >= wAttempts){
  printf("Unable to write (a:%x data:%x)in Flash Memory after %i attempts \n",
          address,data,wAttempts);
  return 1;
 }else{
 /*vmew32(FlashAccessNoIncr,0xF0);*/
 *addFM=vmer32(FlashStatus);
 *addFM = ((*addFM)&0x7f); 
 return 0;
 }
}
/***************************************************************************/
int writeFM(w32 address, w32 data)
/* write to FM and checks for timeout */
{
 int attempts=0;
 vmew32(address,data); 
 while ( (GetStatFM() == BUSYFM) && (attempts < wAttempts) )attempts=attempts+1;
 if(attempts >= wAttempts){
  printf("Unable to write (a:%x data:%x)in Flash Memory after %i attempts \n",
          address,data,wAttempts);
  return 1;
 }else{
   return 0;
 }
}
int readFM(w32 address)
{
 int data,attempts=0;
  data=vmer32(address);
  while ( (GetStatFM() == BUSYFM) && (attempts < wAttempts) )attempts=attempts+1;
  if(attempts >= wAttempts){
      printf("Unable to write (a:%x data:%x)in Flash Memory after %i attempts \n",
                address,data,wAttempts);
      return -1;
   }else{
    return data;
 }
}
                       
/***************************************************************************/
/*FGROUP FlMemChecks
write to FM at address address.
*/
int WriteFM(w32 address,w32 word)
{
   int i;
   if(writeFM(FlashAddClear,0x0) !=0) return -1;
   for(i=0;i<address;i++)vmer32(FlashAccessIncr);
   if(writeFM(FlashAccessNoIncr,0xAA) !=0) return -5;
   if(writeFM(FlashAccessNoIncr,0x55) !=0) return -6;
   if(writeFM(FlashAccessNoIncr,0xA0) !=0) return -7;
   if(writeFM(FlashAccessIncr,word) !=0) return -8;
   return 1;   
}
/*FGROUP FlMemChecks
INCR=1 - read from address drom actual address
INCR=0 - read address
*/
int ReadFM(w32 address,int INCR)
{
/* Read Address in FM
*/
   int i;
   w32 word;
   if(INCR){
   }else{ 
    if(writeFM(FlashAddClear,0x0) !=0) return -1;
    for(i=0;i<address;i++)vmer32(FlashAccessIncr);
   } 
   word=vmer32(FlashAccessIncr)&0xff;
   printf("ADDRESS=%d DATA=%x \n",address,word);
   return address;
}
/*FGROUP FlMemChecks
Writing pattern pat.
pat>0xff : pat goes from 0 to 255 in cycle.
file = 1 - read from config file
file = 0 - uses generated pattern
*/
int LoadFM0(int pat,int Nwords,int file)
{
 int i,size,addFM,addSW,add1;
 int error;
 w32 pat2;
 FILE *load=fopen("LOAD.txt","w");
 errcount=0;
 if(file){
   if(ReadInputFileS(&size) != 0) return 2;
   if(ReadInputFileF(size) != 0)return 1;
   Nwords=size;
 }else{
   Pattern=pat; 
   if(pat>0xff)Pattern=0;
 }  

 if(writeFM(FlashAccessNoIncr,0xF0) !=0 )return 3;
  if( GetStatFM() == READYFM ){
   if(writeFM(FlashAddClear,0x0) !=0) return 10;
   for (i=0; i<Nwords; i++){
     addSW=i&0x7f; 
     error=0;
     if(file) pat2=ConfigFile[i]; 
       else{
        pat2=Pattern;
        if(Pattern<CUT) pat2=0xaa;
     }   
     fprintf(load," Pattern: %2x Address: %5x %2x ",pat2,i,addSW);
     if(writeFMdeb(FlashAccessNoIncr,0xAA,&addFM) !=0){
        printf("Error at address: %i %2x  Status addr= %x\n",i,i,addFM); 
        return 5;
     }
     add1=addFM;
     fprintf(load,"Word #1: %2x ",addFM);      
     if(writeFMdeb(FlashAccessNoIncr,0x55,&addFM) !=0){
        printf("Error at address: %i %2x  Status addr= %x\n",i,i,addFM); 
        return 6;
     }
     if(add1 != addFM) return 333;
     fprintf(load,"#2: %2x ",addFM);      
     if(writeFMdeb(FlashAccessNoIncr,0xA0,&addFM) !=0){
        printf("Error at address: %i %2x  Status addr= %x\n",i,i,addFM); 
        return 7;
     }   
     if(add1 != addFM) return 334;
     fprintf(load,"#3: %2x ",addFM);

     if(writeFMdeb(FlashAccessIncr,pat2,&addFM) !=0){
        printf("Error at address: %i %2x Status addr= %x\n",i,i,addFM); 
        return 8;
     }
     if( ((add1+1)%0x80) != addFM){
       error=1;
       errcount=errcount+error;
     }  
     fprintf(load,"#4: %2x ",addFM);   
     if(pat>0xff)Pattern= (Pattern+1) % MAXCYC; 
     if( (i % 10000) == 0) printf("LOadFM: %i words written \n",i);
     if(error)fprintf(load," Error %i \n",errcount);
       else fprintf(load,"\n");  
     if(quit !=0) return 9;
   }
 if(pat>0xff)Pattern=0xfff;  
 return 0;
 }else return 3;  
}
/*FGROUP FlMemChecks
Writing pattern pat.
pat>0xff : pat goes from 0 to 255 in cycle.
file = 1 - read from config file
file = 0 - uses generated pattern
Different way of writing to FM:
 I do not increase at last step.
 I do increase with reset.
*/
int LoadFMErr(int pat,int Nwords,int file)
{
 int i,size,addFM,addSW,add1;
 int error;
 w32 pat2;
 FILE *load=fopen("LOAD.txt","w");
 errcount=0;
 if(file){
   if(ReadInputFileS(&size) != 0) return 2;
   if(ReadInputFileF(size) != 0)return 1;
   Nwords=size;
 }else{
   Pattern=pat; 
   if(pat>0xff)Pattern=0;
 }  

 if(writeFM(FlashAccessNoIncr,0xF0) !=0 )return 3;
  if( GetStatFM() == READYFM ){
   if(writeFM(FlashAddClear,0x0) !=0) return 10;
   for (i=0; i<Nwords; i++){
     addSW=i&0x7f; 
     error=0;
     if(file) pat2=ConfigFile[i]; 
       else{
        pat2=Pattern;
        if(Pattern<CUT) pat2=0xaa;
     }   
     fprintf(load," Pattern: %2x Address: %5x %2x ",pat2,i,addSW);
     if(writeFMdeb(FlashAccessNoIncr,0xAA,&addFM) !=0){
        printf("Error at address: %i %2x  Status addr= %x\n",i,i,addFM); 
        return 5;
     }
     add1=addFM;
     fprintf(load,"Word #1: %2x ",addFM);      
     if(writeFMdeb(FlashAccessNoIncr,0x55,&addFM) !=0){
        printf("Error at address: %i %2x  Status addr= %x\n",i,i,addFM); 
        return 6;
     }
     if(add1 != addFM) return 333;
     fprintf(load,"#2: %2x ",addFM);      
     if(writeFMdeb(FlashAccessNoIncr,0xA0,&addFM) !=0){
        printf("Error at address: %i %2x  Status addr= %x\n",i,i,addFM); 
        return 7;
     }   
     if(add1 != addFM) return 334;
     fprintf(load,"#3: %2x ",addFM);

     if(writeFMdeb(FlashAccessNoIncr,pat2,&addFM) !=0){
        printf("Error at address: %i %2x Status addr= %x\n",i,i,addFM); 
        return 8;
     }
     if(add1 != addFM) return 335;
     fprintf(load,"#4: %2x ",addFM);   
     if(writeFMdeb(FlashAccessIncr,0xF0,&addFM) !=0)return 88;
     fprintf(load,"#5: %2x ",addFM);          
     if( ((add1+1)%0x80) != addFM){
       error=1;
       AddErr[errcount]=i+1;
       DatErr[errcount]=ConfigFile[i+1];
       fprintf(load," Error %i \n",errcount);
       fprintf(load,"     Address=%5x, Data=%2x \n",AddErr[errcount],DatErr[errcount]);
       errcount=errcount+error;
       i=i+1;
     }  
     if(pat>0xff)Pattern= (Pattern+1) % MAXCYC; 
     if( (i % 10000) == 0) printf("LOadFM: %i words written \n",i);
     if(!error)fprintf(load,"\n");  
     if(quit !=0) return 9;
   }
 if(pat>0xff)Pattern=0xfff;  
 return 0;
 }else return 3;  
}

/*FGROUP FlMemChecks
Uses the Unlock Bypass Mode
*/
int LoadFMUB(int pat,int Nwords)
{
 int i,size,addFM,addSW,error;
 w32 pat2,addFM0;
 FILE *load=fopen("LOAD.txt","w");
 Pattern=pat; 
 if(pat>0xff)Pattern=0;
 if(writeFM(FlashAccessNoIncr,0xF0) !=0 )return 1;

 if( GetStatFM() == READYFM ){
   if(writeFM(FlashAddClear,0x0) !=0) return 10;
   writeFM(FlashAccessNoIncr,0xaa);
   writeFM(FlashAccessNoIncr,0x55);
   writeFM(FlashAccessNoIncr,0x20);
   for (i=0; i<Nwords; i++){
     addSW=i&0x7f; 
     error=0;
     pat2=Pattern;
     if(Pattern<CUT) pat2=0xaa   ;
     fprintf(load," Pattern: %2x Address: %5x %2x ",pat2,i,addSW);
     if(writeFMdeb(FlashAccessNoIncr,0xA0,&addFM) !=0){
        printf("Error at address: %i %2x  Status addr= %x\n",i,i,addFM); 
        return 5;
     }
     addFM0=addFM;
     fprintf(load,"#1: %2x ",addFM);      
     if(writeFMdeb(FlashAccessIncr,pat2,&addFM) !=0){
        printf("Error at address: %i %2x Status addr= %x\n",i,i,addFM); 
        return 8;
     }
     fprintf(load,"#2: %2x ",addFM);
     if((addFM0+1) != addFM)fprintf(load," Error ");   
     if(pat>0xff)Pattern= (Pattern+1) % MAXCYC; 
     if( (i % 10000) == 0) printf("LOadFM: %i words written \n",i);
     if(error)fprintf(load," Error %i \n",error);
       else fprintf(load,"\n");  
     if(quit !=0) return 9;
   }
 writeFM(FlashAccessNoIncr,0x90);  
 writeFM(FlashAccessNoIncr,0x00);  
 if(pat>0xff)Pattern=0xfff;  
 return 0;
 }else return 3;  
}

/*FGROUP FlMemChecks
Increasing address in big loop by reading and checking 
in it jumps.
*/
int ReadLoop(int Nloops)
{
 int i,j;
 w32 address0,address,data;
 address0=readFM(FlashStatus)&0x7f; 
 for(i=0;i<Nloops;i++){
   data=readFM(FlashAccessIncr)&0xff;
   address=readFM(FlashStatus)&0x7f;
   /* printf("%i address0=%2x data=%2x",i,address0,data);*/
   address0=(address0+1) % 0x80;
   if((address0) != address){
    printf(" address error:next address: %x \n",address);
    address0=address-1;
   }else /*printf("\n") */;
 }
}
/*FGROUP FlMemChecks
Increasing address in big loop by writing reset and checking 
in it jumps.
*/
int WriteLoop(int Nloops)
{
 int i,j;
 w32 address0,address;
 address0=readFM(FlashStatus)&0x7f; 
 for(i=0;i<Nloops;i++){
   writeFM(FlashAccessIncr,0xa0);
   address=readFM(FlashStatus)&0x7f;
   /* printf("%i address0=%2x data=%2x",i,address0,data);*/
   address0=(address0+1) % 0x80;
   if((address0) != address){
    printf(" address error:address:%2x, next address: %2x \n",address0-1,address);
    address0=address;
   }else /*printf("\n") */;
 }
}


/*FGROUP FlMemChecks
Check against 0 or what is written in LoadFM0.
*/
int Check0(int Nwords)
{
 int size,diftot=0,diff[8]={0,0,0,0,0,0,0,0};
 int i,j,rc=-1,error,cycl=0,addSW;
 w32 difbit,pit,flword,status,addST,pat2; 
 FILE *dump;
 
 if(writeFM(FlashAddClear,0x0) !=0) return 3;
 dump=fopen("FM.txt","w");
 if(Pattern==0xfff){
  cycl=1;
  Pattern=0;
 }
 for(i=0;i<Nwords;i++){
  error=0;
  status=vmer32(FlashStatus);
  flword=vmer32(FlashAccessIncr)&0xff;
  addST=status&0x7f;
  status=status&0x80;
  addSW=i&0x7f;
  pat2=Pattern;
  if(Pattern<CUT)pat2=0xaa;
  fprintf(dump,"Address: %5x %2x Status Address: %2x %x",i,addSW,addST,status);
  difbit=(flword^pat2);
  if(flword != pat2){
     if(rc == -1)rc=i;
     diftot++;
     error=1;
     fprintf(dump," Error   :%2x %2x \n",pat2,flword);
  }else fprintf(dump," Pattern :%2x %2x \n",pat2,flword);
     
  if(cycl) Pattern=(Pattern+1)% MAXCYC;
  pit=1;
  for(j=0;j<8;j++){
      /*  printf("%i ", difbit&pit );                    */
      diff[j]=diff[j]+( (difbit&pit) == pit );
      pit=2*pit;
  }
  /*  printf("\n");   */
 }
 printf("CheckContent: Total number of different words= %i. \n",diftot);
 printf("First different word at address %i \n",rc);
 printf("Differences bit by bit: \n");
 printf(" Bit0 Bit1 Bit2 Bit3 Bit4 Bit5 Bit6 Bit7 \n");
 for(i=0;i<8;i++)printf(" %.2f",diff[i]/((float) Nwords));
 printf("\n");
 fclose(dump);
 if(rc>0)rc=-rc;
 return (-diftot);
}
/*FGROUP FlMemChecks
*/
int Comb()
{
 int i,dif, ngen=100000;
 FILE *comb=fopen("COMB.txt","w");
 for(i=0;i<0xff;i++){
  if(eraseFM() != 1){
    fclose(comb);
    return 1;
  }  
  LoadFM0(i,ngen,0);
  dif=Check0(ngen);
  if(dif<=0){
   fprintf(comb,"Pattern= %2x Errors/Gen= %i/ %i \n",i,dif,ngen);
  }else{
    fclose(comb);
    return 2;
  }  
 }
 fclose(comb);
 return 0;
}
/*FGROUP FlMemChecks
*/
int FindIT(int Nwords)
{
 int i,ncount=0,first=1;
 int wor,wand,word;
 FILE *adr;
 if(ReadFlashMem() != 0) return 3;
 adr=fopen("ADRer.txt","w");
 for(i=0;i<Nwords;i++){
  if(FlMem[i]=0xff){
   if(first){
    first=0;
    wand=i;wor=i;
    ncount++;
   }else{
    wand=wand&i;
    wor=wor|i;
    ncount++;
   } 
   fprintf(adr,"%5x\n");
  }
 }
 fclose(adr);
 printf("WAND=%x WOR=%x ncount=%i \n",wand,wor,ncount);
 return 0;
}
/*FGROUP FlMemChecks
Monitars data lines after write or read
*/
void Monitor(int Ntimes)
{
 int Mon[Ntimes];
 int i;
 vmew32(FlashAddClear,0x0);
 for(i=0;i<100;i++)
 vmew32(FlashAccessNoIncr,0xAA);

 for(i=0;i<Ntimes;i++){
  Mon[i]=vmer32(FlashAccessNoIncr);
 }
 for(i=0;i<Ntimes;i++){
   printf("%i %x \n",i,Mon[i]);
 }     
}
/*FGROUP VMEtests
Large number of readings
*/
int VMEread(w32 address,int Ntimes,int whatitis){
 int i;
 w32 word;
 for(i=0;i<Ntimes;i++){
  word=(vmer32(address)&0xff);
  if(word != whatitis){
   printf("VME error %i\n",i);
  }
 }
}
/***************************************************************************/
void initmain() {
printf("initmain called.\n");
printf("Assuming VMERCC !!!! \n");
}
void boardInit() {
}
void endmain() {
}


/*ENDOFCF*/
