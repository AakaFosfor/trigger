self.baseAddr="0xb00000"
self.spaceLength="0x14000"
self.vmeregs=[('MessageInput', '0x0800', ''), ('addyTime0', '0x0800', ''), ('addyTime1', '0x0804', ''), ('addyTurnCount', '0x0808', ''), ('AuxMessageInput', '0x0c00', ''), ('BlockIdentificator', '0x00', ''), ('addyVMEIRQVector', '0x08', ''), ('BlockStatus', '0x10', ''), ('addyCoarseDelay', '0x14', ''), ('addyHWByteSelect', '0x18', ''), ('addyHWByteOutp', '0x1c', ''), ('addyBunchSelectOutpEnable', '0x20', ''), ('addyBunchSelectOutpEnableSubAddr', '0x24', ''), ('addyIRQByteAddrSelect', '0x30', ''), ('addyIRQByteAddrMask', '0x34', ''), ('addyTTCErrorSingle', '0x40', ''), ('addyTTCErrorDouble', '0x44', ''), ('addyTTCErrorReady', '0x48', ''), ('BlockTurnCount', '0x50', '')]
self.hiddenfuncs=""
self.funcs=[[None, 'wait for LHCpp + read BST message. \nbstn: 1:BST1   2:BST2\nnppmax: max. number of PP to wait for\n', 'void', 'readBSTpp', [['bstn', 'int', ''], ['nppmax', 'int', '']]], [None, '', 'void', 'readBSTprint', [['bstn', 'int', '']]], [None, '', 'void', 'readBST1raw', []], [None, "Input:\n  ut: 'u' ->detect 'UTC change'\n  ut: 't' ->detect 'Turn change'\nOperation (CPU/UTC times given in 'secs micsecs'):\nread UTC1 and CPU1 time, addyTurnCount, BlockTurnCount\nwhile 1:\n  read UTC2 time, BlockTurnCount2\n  if (UTC2!=UTC1) or (BlockTurnCount2!=BlockTurnCount): \n    read CPU2; break\n  ix++;\nprint CPU/UTC 1, addyTurnCount, BlockTurnCount, ut\n      CPU/UTC 2, addyTurnCount, BlockTurnCount2, ix\n", 'void', 'readBSTutcturn', [['ut', 'char', '']]], [None, '', 'void', 'readall', []]]
