VMEB software for VME boards
----------------------------

The main goal of VMEB software is to have common, unified software 
for different VME boards.
The side effect of that arrangement is, that the common LINE interface and
GUI interface for basic board testing can be generated by 
compiler prepared for this purpose. 
The VME registers and corresponding operations are accessible
interactively from line/graphic interface having common look & feel for
all the boards.
The same routines (primitives), prepared for the testing can be used
later for the runtime environment. 

The plain C is used for VME access and Python/Tkinter is used for
user interface.
User written routines for VME access are appended by special comments,
(let's call them 'directives')
to denote the symbolic names for VME registers and routines:

1. the board name, default VME base address, the length of VME space 
   used by the board. Only 1 such a comment should be present.

examples:
/*BOARD ltu 0xcf0000 0x100 */
/*BOARD ltu 0x40000 */      -default vme_space_length: 0x1000 
/*BOARD ltu "VXI0::450" */  -using VISA library (with NI MXI cards)

2. VME registers (addresses):
The relative address of each VME register is described by 
#define statement. More #define statements are enclosed
by /*REGSTART */ and /*REGEND */ delimiters to denote symbolic
names for VME registers.
The 3 different /*REGSTART statements (REGSTART8, REGSTART16, REGSTART32)
are used for 8, 16 or 32 bit wide access to VME registers.

examples:
/*REGSTART16 */
#define reg2 0x20   /* 0x20 is relative address of the VME register  reg2 */
#define reg3 40     /* the registers reg2, reg3 are 16 bits wide registers */
/*REGEND */

3. VME primitives
-----------------
Each VME primitive is written as standard C function. If it is prefixed by
/*FGROUP  comment, it will be visible in GUI as a button. 
The primitives can be grouped into groups by defining
the name of the group just after the FGROUP keyword.
It is possible to change standard behaviour (which is showing
the button for each /*FGROUP -prefixed VME primitive).
VME primitives belonging to groups listed in /*HIDDEN comment are not shown.

w32, w16 or w8 data types can be used for definition of function result 
type  or its parameters. The following typedefs are automatically
included (from vmewrap.h file):

typedef unsigned long int w32
typedef unsigned short int w16
typedef unsigned char w8

Standard vmer*() and vmew*() functions should be used for VME access:

value= vmer*(relative_address)
vmew*(relative_address, value)

Where '*' stands for 8, 16 or 32 bits wide data access.

The full syntax of FGROUP directive is:
/*FGROUP [group_name] [GUI gui_func_name [gui_button_name]]   \n
the description of the primitive which will appears as the help -text
in GUI...
*/
th primitive C-function definition

where:
group_name -if present, the primitive is part of the group group_name
            The special effect is reached by using TOP for group_name.
            In this case, the name of that function appears directly
            as the button name on vmeboard widget in GUI.
            The group_name can be enclosed in "" (e.g. "Conf.\nparameters")

GUI gui_func_name is the extension for 'GUI user interface'.
            In this case, the C-function definition is missing,
            'GUI user interface' is user-written interface in Python
            which can use another FGROUP- defined C-functions.
            Instead of C-function definition, user-written GUI function
            named gui_button_name, is supplied in file 
            BOARD/BOARD_u.py. 

gui_button_name optional name for the button invoking the GUI func_name
            It can be defined as string (e.g. "Load\nparameters")

C-function definition
  -the possible return values of the function: 
   void, int, w8, w16, w32,float,char
  -parameter types: int, int *, w8, w8 *, w16, w16 *, w32, w32 *
            (i.e. indirect addressing possible too)
examples:
/*HIDDEN debug measurements */  -groups 'debug' and 'measurements'
                                 will not be shown
/*FGROUP 
the usage of PrimitiveName function
*/
PrimitiveName(w32 p1, w32 *p2,...) {
}

See guiexample or InpSelTiming functions in ttcvi/ttcvi_u.py file
for GUI example.

Example
-------
Let's have the following conf. file named vmeboard.cf:
/*BOARD vmeboard 0x20000 */

/*REGSTART */
#define reg2 0x20
#define reg3 40
/*REGEND */

/*FGROUP */
int init(w32 preg2) {
w32 regval;
regval= vmeread(reg3);
vmewrite(reg2, preg2+regval);
}

/*FGROUP TOP GUI example
the GUI function 'example' is given in file vmeboard/vmeboard_u.py
*/

/*ENDOFCF -everything after this line (including this line)
is skipped (i.e. not scanned by vmecomp).

SLM editors:
------------
- GUI  -->ltu6.tcl
- text -->slmcmp.Cmpslm

.seq ---> ltu6.tcl ---> .seq
.slm ---> slmcmp.Cmpslm ---> .seq --->slmcomp.Disslm  ---> log-window
                                  --->ltu.c SLMload() ---> LTU hw
